{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Administrator\\\\Downloads\\\\mern-job-portal\\\\mern-job-portal\\\\frontend\\\\src\\\\pages\\\\UserDashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport API from '../api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UserDashboard = () => {\n  _s();\n  const [jobs, setJobs] = useState([]);\n  const [applications, setApplications] = useState([]);\n  const [selectedJob, setSelectedJob] = useState(null); // Track the job the user is applying for\n  const [resume, setResume] = useState(null); // Track the uploaded resume file\n\n  // Fetch the list of jobs\n  useEffect(() => {\n    const fetchJobs = async () => {\n      try {\n        const {\n          data\n        } = await API.get('/jobs'); // Fetch all available jobs\n        setJobs(data);\n      } catch (error) {\n        console.error('Error fetching jobs:', error);\n      }\n    };\n    fetchJobs();\n  }, []);\n\n  // Fetch the user's applications\n  useEffect(() => {\n    const fetchApplications = async () => {\n      try {\n        const {\n          data\n        } = await API.get('/jobs/applications'); // Fetch user's application statuses\n        setApplications(data);\n      } catch (error) {\n        console.error('Error fetching applications:', error);\n      }\n    };\n    fetchApplications();\n  }, []);\n  const handleApply = async () => {\n    if (!resume) {\n      alert('Please upload your resume.');\n      return;\n    }\n    const formData = new FormData();\n    formData.append('resume', resume);\n    try {\n      await API.post(`/jobs/apply/${selectedJob}`, formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      alert('Applied successfully!');\n      setSelectedJob(null); // Reset after applying\n    } catch (error) {\n      var _error$response;\n      console.error('Error applying for job:', ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n      alert('Failed to apply for job.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"User Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Available Jobs\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this), jobs.length > 0 ? jobs.map(job => /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        border: '1px solid #ccc',\n        padding: '10px',\n        margin: '10px 0'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: job.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: job.description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 25\n      }, this), selectedJob === job._id ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          onChange: e => setResume(e.target.files[0]),\n          accept: \".pdf,.doc,.docx\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 33\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleApply,\n          children: \"Submit Application\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 33\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setSelectedJob(null),\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 33\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 29\n      }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setSelectedJob(job._id),\n        children: \"Apply Now\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 29\n      }, this)]\n    }, job._id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 21\n    }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No jobs available at the moment.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Your Applications\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }, this), applications.length > 0 ? applications.map(app => /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        border: '1px solid #ccc',\n        padding: '10px',\n        margin: '10px 0'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Job Title:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 28\n        }, this), \" \", app.title]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Status:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 28\n        }, this), \" \", app.application.status]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 25\n      }, this)]\n    }, app.jobId, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 21\n    }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"You haven't applied for any jobs yet.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 9\n  }, this);\n};\n_s(UserDashboard, \"ImtDvdAAB6ZNgXkYi57YmqNRemw=\");\n_c = UserDashboard;\nexport default UserDashboard;\nvar _c;\n$RefreshReg$(_c, \"UserDashboard\");","map":{"version":3,"names":["React","useEffect","useState","API","jsxDEV","_jsxDEV","UserDashboard","_s","jobs","setJobs","applications","setApplications","selectedJob","setSelectedJob","resume","setResume","fetchJobs","data","get","error","console","fetchApplications","handleApply","alert","formData","FormData","append","post","headers","_error$response","response","message","children","fileName","_jsxFileName","lineNumber","columnNumber","length","map","job","style","border","padding","margin","title","description","_id","type","onChange","e","target","files","accept","onClick","app","application","status","jobId","_c","$RefreshReg$"],"sources":["C:/Users/Administrator/Downloads/mern-job-portal/mern-job-portal/frontend/src/pages/UserDashboard.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport API from '../api';\r\n\r\nconst UserDashboard = () => {\r\n    const [jobs, setJobs] = useState([]);\r\n    const [applications, setApplications] = useState([]);\r\n    const [selectedJob, setSelectedJob] = useState(null); // Track the job the user is applying for\r\n    const [resume, setResume] = useState(null); // Track the uploaded resume file\r\n\r\n    // Fetch the list of jobs\r\n    useEffect(() => {\r\n        const fetchJobs = async () => {\r\n            try {\r\n                const { data } = await API.get('/jobs'); // Fetch all available jobs\r\n                setJobs(data);\r\n            } catch (error) {\r\n                console.error('Error fetching jobs:', error);\r\n            }\r\n        };\r\n\r\n        fetchJobs();\r\n    }, []);\r\n\r\n    // Fetch the user's applications\r\n    useEffect(() => {\r\n        const fetchApplications = async () => {\r\n            try {\r\n                const { data } = await API.get('/jobs/applications'); // Fetch user's application statuses\r\n                setApplications(data);\r\n            } catch (error) {\r\n                console.error('Error fetching applications:', error);\r\n            }\r\n        };\r\n\r\n        fetchApplications();\r\n    }, []);\r\n\r\n    const handleApply = async () => {\r\n        if (!resume) {\r\n            alert('Please upload your resume.');\r\n            return;\r\n        }\r\n\r\n        const formData = new FormData();\r\n        formData.append('resume', resume);\r\n\r\n        try {\r\n            await API.post(`/jobs/apply/${selectedJob}`, formData, {\r\n                headers: { 'Content-Type': 'multipart/form-data' },\r\n            });\r\n            alert('Applied successfully!');\r\n            setSelectedJob(null); // Reset after applying\r\n        } catch (error) {\r\n            console.error('Error applying for job:', error.response?.data || error.message);\r\n            alert('Failed to apply for job.');\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h1>User Dashboard</h1>\r\n\r\n            <h2>Available Jobs</h2>\r\n            {jobs.length > 0 ? (\r\n                jobs.map((job) => (\r\n                    <div key={job._id} style={{ border: '1px solid #ccc', padding: '10px', margin: '10px 0' }}>\r\n                        <h3>{job.title}</h3>\r\n                        <p>{job.description}</p>\r\n                        {selectedJob === job._id ? (\r\n                            <div>\r\n                                <input\r\n                                    type=\"file\"\r\n                                    onChange={(e) => setResume(e.target.files[0])}\r\n                                    accept=\".pdf,.doc,.docx\"\r\n                                />\r\n                                <button onClick={handleApply}>Submit Application</button>\r\n                                <button onClick={() => setSelectedJob(null)}>Cancel</button>\r\n                            </div>\r\n                        ) : (\r\n                            <button onClick={() => setSelectedJob(job._id)}>Apply Now</button>\r\n                        )}\r\n                    </div>\r\n                ))\r\n            ) : (\r\n                <p>No jobs available at the moment.</p>\r\n            )}\r\n\r\n            <h2>Your Applications</h2>\r\n            {applications.length > 0 ? (\r\n                applications.map((app) => (\r\n                    <div key={app.jobId} style={{ border: '1px solid #ccc', padding: '10px', margin: '10px 0' }}>\r\n                        <p><strong>Job Title:</strong> {app.title}</p>\r\n                        <p><strong>Status:</strong> {app.application.status}</p>\r\n                    </div>\r\n                ))\r\n            ) : (\r\n                <p>You haven't applied for any jobs yet.</p>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default UserDashboard;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
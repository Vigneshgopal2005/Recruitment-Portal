{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\vignesh G\\\\Downloads\\\\mern-job-portal\\\\mern-job-portal\\\\mern-job-portal\\\\frontend\\\\src\\\\components\\\\HR\\\\UpdateApplication.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport API from '../../api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UpdateApplication = ({\n  jobId\n}) => {\n  _s();\n  const [applications, setApplications] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  // Assume you fetch applications using jobId\n\n  const handleStatusChange = async (applicationId, newStatus, applicantEmail, applicantName) => {\n    setLoading(true);\n    try {\n      // Update application status first\n      await API.put(`/applications/${applicationId}`, {\n        status: newStatus\n      });\n\n      // If Accepted, send email\n      if (newStatus === 'Accepted') {\n        await API.post('/send-email', {\n          to: applicantEmail,\n          name: applicantName,\n          jobId: jobId\n        });\n      }\n      alert(`Application ${newStatus} successfully!`);\n      // Re-fetch applications if needed\n    } catch (error) {\n      console.error('Error updating status:', error);\n      alert('Failed to update application');\n    }\n    setLoading(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [applications.map(app => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: app.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Status: \", app.status]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleStatusChange(app._id, 'Accepted', app.email, app.name),\n        children: \"Accept\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleStatusChange(app._id, 'Rejected', app.email, app.name),\n        children: \"Reject\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleStatusChange(app._id, 'Waiting', app.email, app.name),\n        children: \"Waiting\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 21\n      }, this)]\n    }, app._id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 17\n    }, this)), loading && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Processing...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 25\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 9\n  }, this);\n  const updateStatus = async (applicationId, newStatus) => {\n    try {\n      await API.patch(`/jobs/update-status/${jobId}/${applicationId}`, {\n        status: newStatus\n      });\n      setApplications(applications.map(app => app._id === applicationId ? {\n        ...app,\n        status: newStatus\n      } : app));\n    } catch (error) {\n      console.error('Error updating status:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Applications\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this), applications.map(app => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Name: \", app.userId.name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Email: \", app.userId.email]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Resume: \", /*#__PURE__*/_jsxDEV(\"a\", {\n          href: `http://localhost:5000/${app.resume}`,\n          target: \"_blank\",\n          rel: \"noopener noreferrer\",\n          children: \"View\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 33\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Status: \", app.status]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => updateStatus(app._id, 'waiting'),\n        children: \"Waiting\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => updateStatus(app._id, 'accepted'),\n        children: \"Accept\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => updateStatus(app._id, 'rejected'),\n        children: \"Reject\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 21\n      }, this)]\n    }, app._id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 17\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 9\n  }, this);\n};\n_s(UpdateApplication, \"1mIuBMHFMRq+KJGH5NL8IpVLSLs=\");\n_c = UpdateApplication;\nexport default UpdateApplication;\nvar _c;\n$RefreshReg$(_c, \"UpdateApplication\");","map":{"version":3,"names":["React","useEffect","useState","API","jsxDEV","_jsxDEV","UpdateApplication","jobId","_s","applications","setApplications","loading","setLoading","handleStatusChange","applicationId","newStatus","applicantEmail","applicantName","put","status","post","to","name","alert","error","console","children","map","app","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_id","email","updateStatus","patch","userId","href","resume","target","rel","_c","$RefreshReg$"],"sources":["C:/Users/vignesh G/Downloads/mern-job-portal/mern-job-portal/mern-job-portal/frontend/src/components/HR/UpdateApplication.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport API from '../../api';\r\n\r\nconst UpdateApplication = ({ jobId }) => {\r\n    const [applications, setApplications] = useState([]);\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    // Assume you fetch applications using jobId\r\n\r\n    const handleStatusChange = async (applicationId, newStatus, applicantEmail, applicantName) => {\r\n        setLoading(true);\r\n        try {\r\n            // Update application status first\r\n            await API.put(`/applications/${applicationId}`, { status: newStatus });\r\n\r\n            // If Accepted, send email\r\n            if (newStatus === 'Accepted') {\r\n                await API.post('/send-email', {\r\n                    to: applicantEmail,\r\n                    name: applicantName,\r\n                    jobId: jobId,\r\n                });\r\n            }\r\n\r\n            alert(`Application ${newStatus} successfully!`);\r\n            // Re-fetch applications if needed\r\n        } catch (error) {\r\n            console.error('Error updating status:', error);\r\n            alert('Failed to update application');\r\n        }\r\n        setLoading(false);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            {/* Render applications */}\r\n            {applications.map((app) => (\r\n                <div key={app._id}>\r\n                    <h4>{app.name}</h4>\r\n                    <p>Status: {app.status}</p>\r\n                    <button onClick={() => handleStatusChange(app._id, 'Accepted', app.email, app.name)}>Accept</button>\r\n                    <button onClick={() => handleStatusChange(app._id, 'Rejected', app.email, app.name)}>Reject</button>\r\n                    <button onClick={() => handleStatusChange(app._id, 'Waiting', app.email, app.name)}>Waiting</button>\r\n                </div>\r\n            ))}\r\n            {loading && <p>Processing...</p>}\r\n        </div>\r\n    );\r\n\r\n\r\n    const updateStatus = async (applicationId, newStatus) => {\r\n        try {\r\n            await API.patch(`/jobs/update-status/${jobId}/${applicationId}`, { status: newStatus });\r\n            setApplications(applications.map(app =>\r\n                app._id === applicationId ? { ...app, status: newStatus } : app\r\n            ));\r\n        } catch (error) {\r\n            console.error('Error updating status:', error);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h2>Applications</h2>\r\n            {applications.map(app => (\r\n                <div key={app._id}>\r\n                    <p>Name: {app.userId.name}</p>\r\n                    <p>Email: {app.userId.email}</p>\r\n                    <p>\r\n                        Resume: <a href={`http://localhost:5000/${app.resume}`} target=\"_blank\" rel=\"noopener noreferrer\">View</a>\r\n                    </p>\r\n                    <p>Status: {app.status}</p>\r\n                    <button onClick={() => updateStatus(app._id, 'waiting')}>Waiting</button>\r\n                    <button onClick={() => updateStatus(app._id, 'accepted')}>Accept</button>\r\n                    <button onClick={() => updateStatus(app._id, 'rejected')}>Reject</button>\r\n                </div>\r\n            ))}\r\n        </div>\r\n    );\r\n};\r\n\r\n    export default UpdateApplication;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
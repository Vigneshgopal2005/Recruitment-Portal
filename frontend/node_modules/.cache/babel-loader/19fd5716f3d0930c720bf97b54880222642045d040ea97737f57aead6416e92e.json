{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Administrator\\\\Downloads\\\\mern-job-portal\\\\mern-job-portal\\\\frontend\\\\src\\\\pages\\\\UserDashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport API from '../api';\nimport { useNavigate } from 'react-router-dom'; // Correct import for navigation\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UserDashboard = () => {\n  _s();\n  const [jobs, setJobs] = useState([]);\n  const [applications, setApplications] = useState([]);\n  const [selectedJob, setSelectedJob] = useState(null); // Track the job the user is applying for\n  const [resume, setResume] = useState(null); // Track the uploaded resume file\n  const navigate = useNavigate(); // useNavigate hook to navigate programmatically\n\n  // Fetch the list of jobs\n  const fetchJobs = async () => {\n    try {\n      const {\n        data\n      } = await API.get('/jobs'); // Fetch all available jobs\n      setJobs(data);\n    } catch (error) {\n      console.error('Error fetching jobs:', error);\n    }\n  };\n\n  // Fetch the user's applications\n  const fetchApplications = async () => {\n    try {\n      const {\n        data\n      } = await API.get('/jobs/applications'); // Fetch user's application statuses\n      setApplications(data);\n    } catch (error) {\n      console.error('Error fetching applications:', error);\n    }\n  };\n  useEffect(() => {\n    fetchJobs(); // Call fetchJobs on component mount\n    fetchApplications(); // Call fetchApplications on component mount\n  }, []); // Empty dependency array ensures this runs once after the initial render\n\n  const handleApply = async () => {\n    if (!resume) {\n      alert('Please upload your resume.');\n      return;\n    }\n    const formData = new FormData();\n    formData.append('resume', resume);\n    try {\n      await API.post(`/jobs/apply/${selectedJob}`, formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      alert('Applied successfully!');\n      setSelectedJob(null); // Reset after applying\n      setResume(null); // Reset the resume file input\n      // Re-fetch jobs and applications to reflect the new state\n      fetchJobs();\n      fetchApplications();\n    } catch (error) {\n      var _error$response;\n      console.error('Error applying for job:', ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n      alert('Failed to apply for job.');\n    }\n  };\n  const handleLogout = () => {\n    // Clear session or token (depending on your app's authentication flow)\n    localStorage.removeItem('authToken'); // Example if using localStorage for token\n    navigate('/login'); // Redirect to the login page using navigate\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"User Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleLogout,\n      children: \"Logout\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Available Jobs\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this), jobs.length > 0 ? jobs.map(job => /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        border: '1px solid #ccc',\n        padding: '10px',\n        margin: '10px 0'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: job.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: job.description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 25\n      }, this), selectedJob === job._id ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          onChange: e => setResume(e.target.files[0]),\n          accept: \".pdf,.doc,.docx\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 33\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleApply,\n          children: \"Submit Application\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 33\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setSelectedJob(null),\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 33\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 29\n      }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setSelectedJob(job._id),\n        children: \"Apply Now\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 29\n      }, this)]\n    }, job._id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 21\n    }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No jobs available at the moment.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Your Applications\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }, this), applications.length > 0 ? applications.map(app => /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        border: '1px solid #ccc',\n        padding: '10px',\n        margin: '10px 0'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Job Title:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 28\n        }, this), \" \", app.title]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Status:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 28\n        }, this), \" \", app.application.status]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 25\n      }, this)]\n    }, app.jobId, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 21\n    }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"You haven't applied for any jobs yet.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 9\n  }, this);\n};\n_s(UserDashboard, \"7NsdopT6GrmhDXFZXJiD1N/Dv5U=\", false, function () {\n  return [useNavigate];\n});\n_c = UserDashboard;\nexport default UserDashboard;\nvar _c;\n$RefreshReg$(_c, \"UserDashboard\");","map":{"version":3,"names":["React","useEffect","useState","API","useNavigate","jsxDEV","_jsxDEV","UserDashboard","_s","jobs","setJobs","applications","setApplications","selectedJob","setSelectedJob","resume","setResume","navigate","fetchJobs","data","get","error","console","fetchApplications","handleApply","alert","formData","FormData","append","post","headers","_error$response","response","message","handleLogout","localStorage","removeItem","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","length","map","job","style","border","padding","margin","title","description","_id","type","onChange","e","target","files","accept","app","application","status","jobId","_c","$RefreshReg$"],"sources":["C:/Users/Administrator/Downloads/mern-job-portal/mern-job-portal/frontend/src/pages/UserDashboard.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport API from '../api';\r\nimport { useNavigate } from 'react-router-dom'; // Correct import for navigation\r\n\r\nconst UserDashboard = () => {\r\n    const [jobs, setJobs] = useState([]);\r\n    const [applications, setApplications] = useState([]);\r\n    const [selectedJob, setSelectedJob] = useState(null); // Track the job the user is applying for\r\n    const [resume, setResume] = useState(null); // Track the uploaded resume file\r\n    const navigate = useNavigate(); // useNavigate hook to navigate programmatically\r\n\r\n    // Fetch the list of jobs\r\n    const fetchJobs = async () => {\r\n        try {\r\n            const { data } = await API.get('/jobs'); // Fetch all available jobs\r\n            setJobs(data);\r\n        } catch (error) {\r\n            console.error('Error fetching jobs:', error);\r\n        }\r\n    };\r\n\r\n    // Fetch the user's applications\r\n    const fetchApplications = async () => {\r\n        try {\r\n            const { data } = await API.get('/jobs/applications'); // Fetch user's application statuses\r\n            setApplications(data);\r\n        } catch (error) {\r\n            console.error('Error fetching applications:', error);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        fetchJobs(); // Call fetchJobs on component mount\r\n        fetchApplications(); // Call fetchApplications on component mount\r\n    }, []); // Empty dependency array ensures this runs once after the initial render\r\n\r\n    const handleApply = async () => {\r\n        if (!resume) {\r\n            alert('Please upload your resume.');\r\n            return;\r\n        }\r\n\r\n        const formData = new FormData();\r\n        formData.append('resume', resume);\r\n\r\n        try {\r\n            await API.post(`/jobs/apply/${selectedJob}`, formData, {\r\n                headers: { 'Content-Type': 'multipart/form-data' },\r\n            });\r\n            alert('Applied successfully!');\r\n            setSelectedJob(null); // Reset after applying\r\n            setResume(null); // Reset the resume file input\r\n            // Re-fetch jobs and applications to reflect the new state\r\n            fetchJobs();\r\n            fetchApplications();\r\n        } catch (error) {\r\n            console.error('Error applying for job:', error.response?.data || error.message);\r\n            alert('Failed to apply for job.');\r\n        }\r\n    };\r\n\r\n    const handleLogout = () => {\r\n        // Clear session or token (depending on your app's authentication flow)\r\n        localStorage.removeItem('authToken'); // Example if using localStorage for token\r\n        navigate('/login'); // Redirect to the login page using navigate\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h1>User Dashboard</h1>\r\n\r\n            <button onClick={handleLogout}>Logout</button> {/* Logout button */}\r\n\r\n            <h2>Available Jobs</h2>\r\n            {jobs.length > 0 ? (\r\n                jobs.map((job) => (\r\n                    <div key={job._id} style={{ border: '1px solid #ccc', padding: '10px', margin: '10px 0' }}>\r\n                        <h3>{job.title}</h3>\r\n                        <p>{job.description}</p>\r\n                        {selectedJob === job._id ? (\r\n                            <div>\r\n                                <input\r\n                                    type=\"file\"\r\n                                    onChange={(e) => setResume(e.target.files[0])}\r\n                                    accept=\".pdf,.doc,.docx\"\r\n                                />\r\n                                <button onClick={handleApply}>Submit Application</button>\r\n                                <button onClick={() => setSelectedJob(null)}>Cancel</button>\r\n                            </div>\r\n                        ) : (\r\n                            <button onClick={() => setSelectedJob(job._id)}>Apply Now</button>\r\n                        )}\r\n                    </div>\r\n                ))\r\n            ) : (\r\n                <p>No jobs available at the moment.</p>\r\n            )}\r\n\r\n            <h2>Your Applications</h2>\r\n            {applications.length > 0 ? (\r\n                applications.map((app) => (\r\n                    <div key={app.jobId} style={{ border: '1px solid #ccc', padding: '10px', margin: '10px 0' }}>\r\n                        <p><strong>Job Title:</strong> {app.title}</p>\r\n                        <p><strong>Status:</strong> {app.application.status}</p>\r\n                    </div>\r\n                ))\r\n            ) : (\r\n                <p>You haven't applied for any jobs yet.</p>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default UserDashboard;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,GAAG,MAAM,QAAQ;AACxB,SAASC,WAAW,QAAQ,kBAAkB,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEhD,MAAMC,aAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACxB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACS,YAAY,EAAEC,eAAe,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAACW,WAAW,EAAEC,cAAc,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EACtD,MAAM,CAACa,MAAM,EAAEC,SAAS,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EAC5C,MAAMe,QAAQ,GAAGb,WAAW,CAAC,CAAC,CAAC,CAAC;;EAEhC;EACA,MAAMc,SAAS,GAAG,MAAAA,CAAA,KAAY;IAC1B,IAAI;MACA,MAAM;QAAEC;MAAK,CAAC,GAAG,MAAMhB,GAAG,CAACiB,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC;MACzCV,OAAO,CAACS,IAAI,CAAC;IACjB,CAAC,CAAC,OAAOE,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAChD;EACJ,CAAC;;EAED;EACA,MAAME,iBAAiB,GAAG,MAAAA,CAAA,KAAY;IAClC,IAAI;MACA,MAAM;QAAEJ;MAAK,CAAC,GAAG,MAAMhB,GAAG,CAACiB,GAAG,CAAC,oBAAoB,CAAC,CAAC,CAAC;MACtDR,eAAe,CAACO,IAAI,CAAC;IACzB,CAAC,CAAC,OAAOE,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IACxD;EACJ,CAAC;EAEDpB,SAAS,CAAC,MAAM;IACZiB,SAAS,CAAC,CAAC,CAAC,CAAC;IACbK,iBAAiB,CAAC,CAAC,CAAC,CAAC;EACzB,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,MAAMC,WAAW,GAAG,MAAAA,CAAA,KAAY;IAC5B,IAAI,CAACT,MAAM,EAAE;MACTU,KAAK,CAAC,4BAA4B,CAAC;MACnC;IACJ;IAEA,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;IAC/BD,QAAQ,CAACE,MAAM,CAAC,QAAQ,EAAEb,MAAM,CAAC;IAEjC,IAAI;MACA,MAAMZ,GAAG,CAAC0B,IAAI,CAAC,eAAehB,WAAW,EAAE,EAAEa,QAAQ,EAAE;QACnDI,OAAO,EAAE;UAAE,cAAc,EAAE;QAAsB;MACrD,CAAC,CAAC;MACFL,KAAK,CAAC,uBAAuB,CAAC;MAC9BX,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC;MACtBE,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;MACjB;MACAE,SAAS,CAAC,CAAC;MACXK,iBAAiB,CAAC,CAAC;IACvB,CAAC,CAAC,OAAOF,KAAK,EAAE;MAAA,IAAAU,eAAA;MACZT,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAE,EAAAU,eAAA,GAAAV,KAAK,CAACW,QAAQ,cAAAD,eAAA,uBAAdA,eAAA,CAAgBZ,IAAI,KAAIE,KAAK,CAACY,OAAO,CAAC;MAC/ER,KAAK,CAAC,0BAA0B,CAAC;IACrC;EACJ,CAAC;EAED,MAAMS,YAAY,GAAGA,CAAA,KAAM;IACvB;IACAC,YAAY,CAACC,UAAU,CAAC,WAAW,CAAC,CAAC,CAAC;IACtCnB,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC;EACxB,CAAC;EAED,oBACIX,OAAA;IAAA+B,QAAA,gBACI/B,OAAA;MAAA+B,QAAA,EAAI;IAAc;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAEvBnC,OAAA;MAAQoC,OAAO,EAAER,YAAa;MAAAG,QAAA,EAAC;IAAM;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,KAAC,eAE/CnC,OAAA;MAAA+B,QAAA,EAAI;IAAc;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACtBhC,IAAI,CAACkC,MAAM,GAAG,CAAC,GACZlC,IAAI,CAACmC,GAAG,CAAEC,GAAG,iBACTvC,OAAA;MAAmBwC,KAAK,EAAE;QAAEC,MAAM,EAAE,gBAAgB;QAAEC,OAAO,EAAE,MAAM;QAAEC,MAAM,EAAE;MAAS,CAAE;MAAAZ,QAAA,gBACtF/B,OAAA;QAAA+B,QAAA,EAAKQ,GAAG,CAACK;MAAK;QAAAZ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eACpBnC,OAAA;QAAA+B,QAAA,EAAIQ,GAAG,CAACM;MAAW;QAAAb,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,EACvB5B,WAAW,KAAKgC,GAAG,CAACO,GAAG,gBACpB9C,OAAA;QAAA+B,QAAA,gBACI/B,OAAA;UACI+C,IAAI,EAAC,MAAM;UACXC,QAAQ,EAAGC,CAAC,IAAKvC,SAAS,CAACuC,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC,CAAE;UAC9CC,MAAM,EAAC;QAAiB;UAAApB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC3B,CAAC,eACFnC,OAAA;UAAQoC,OAAO,EAAElB,WAAY;UAAAa,QAAA,EAAC;QAAkB;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eACzDnC,OAAA;UAAQoC,OAAO,EAAEA,CAAA,KAAM5B,cAAc,CAAC,IAAI,CAAE;UAAAuB,QAAA,EAAC;QAAM;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC3D,CAAC,gBAENnC,OAAA;QAAQoC,OAAO,EAAEA,CAAA,KAAM5B,cAAc,CAAC+B,GAAG,CAACO,GAAG,CAAE;QAAAf,QAAA,EAAC;MAAS;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CACpE;IAAA,GAfKI,GAAG,CAACO,GAAG;MAAAd,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAgBZ,CACR,CAAC,gBAEFnC,OAAA;MAAA+B,QAAA,EAAG;IAAgC;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CACzC,eAEDnC,OAAA;MAAA+B,QAAA,EAAI;IAAiB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACzB9B,YAAY,CAACgC,MAAM,GAAG,CAAC,GACpBhC,YAAY,CAACiC,GAAG,CAAEe,GAAG,iBACjBrD,OAAA;MAAqBwC,KAAK,EAAE;QAAEC,MAAM,EAAE,gBAAgB;QAAEC,OAAO,EAAE,MAAM;QAAEC,MAAM,EAAE;MAAS,CAAE;MAAAZ,QAAA,gBACxF/B,OAAA;QAAA+B,QAAA,gBAAG/B,OAAA;UAAA+B,QAAA,EAAQ;QAAU;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,KAAC,EAACkB,GAAG,CAACT,KAAK;MAAA;QAAAZ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC9CnC,OAAA;QAAA+B,QAAA,gBAAG/B,OAAA;UAAA+B,QAAA,EAAQ;QAAO;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,KAAC,EAACkB,GAAG,CAACC,WAAW,CAACC,MAAM;MAAA;QAAAvB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC;IAAA,GAFlDkB,GAAG,CAACG,KAAK;MAAAxB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAGd,CACR,CAAC,gBAEFnC,OAAA;MAAA+B,QAAA,EAAG;IAAqC;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAC9C;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACA,CAAC;AAEd,CAAC;AAACjC,EAAA,CA3GID,aAAa;EAAA,QAKEH,WAAW;AAAA;AAAA2D,EAAA,GAL1BxD,aAAa;AA6GnB,eAAeA,aAAa;AAAC,IAAAwD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}